name: Build Custom Arch ISO

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm archiso git rsync base-devel

      - name: Build ISO
        run: |
          set -e
          mkdir -p iso_build
          cp -r /usr/share/archiso/configs/releng iso_build/
          rm -rf iso_build/releng/airootfs/etc/skel || true
          mkdir -p iso_build/releng/airootfs/etc/skel/.config
          rsync -av .config/ iso_build/releng/airootfs/etc/skel/.config/ || true
          mkdir -p iso_build/releng/airootfs/usr/local/bin
          cp archinstall.yaml iso_build/releng/airootfs/archinstall.yaml || true
          cp README.md iso_build/releng/airootfs/README.md || true

          cd iso_build/releng
          mkdir -p work out
          export MKARCHISO_NSPAWN=0
          mkarchiso -v -w work -o out .

          echo "Build completed. Contents of out/:"
          ls -lah out/

      - name: Upload ISO artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: arch-iso
          path: iso_build/releng/out/*.iso

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download built ISO
        uses: actions/download-artifact@v4
        with:
          name: arch-iso
          path: iso_output

      - name: Verify ISO presence
        run: |
          echo "Verifying ISO download..."
          ls -lah iso_output

      - name: Create new Git tag
        id: tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --list "V*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEXT_NUM=1
          else
            NEXT_NUM=$(( ${LATEST_TAG#V} + 1 ))
          fi
          NEW_TAG="V$NEXT_NUM"
          echo "Creating new tag: $NEW_TAG"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "Arch ISO ${{ steps.tag.outputs.tag }}"
          body: "Automated build of custom Arch ISO."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ISO to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: iso_output/*.iso
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
